#
# Preparations
#
crc start
eval $(crc oc-env)
oc completion -h
source <(oc completion bash)
export EDITOR=/usr/bin/vi
oc whoami --show-console
git clone https://github.com/murilloo/redhat-ex288-exam-preparation

# Podman
podman login quay.io
podman build -t my_httpd --build-arg "HTTP_PORT=3000" .
podman build -t nodejs-hello-world .
podman tag localhost/nodejs-hello-world quay.io/murill00/nodejs-hello-world
podman push quay.io/murill00/nodejs-hello-world
podman rmi $(podman images ps -qa)

# Skopeo
skopeo copy docker://quay.io/buildah/stable docker://registry.internal.company.com/buildah
skopeo copy oci:busybox_ocilayout:latest dir:existingemptydirectory
skopeo login --username USER myregistrydomain.com:5000
skopeo inspect docker://myregistrydomain.com:5000/busybox


#
# Chapter 2
#
oc login -u developer -p developer
oc new-project hello-wolrd
oc new-app --name hello-world https://github.com/murilloo/redhat-ex288-exam-preparation --context-dir=nodejs-hello-world/
oc get pods --show-labels=true
oc delete all -l openshift.io/build.name=hello-world
oc get templates -n openshift
oc delete pods,deployments,services,routes,is,buildconfig --all
oc describe templates mysql-ephemeral  -n openshift

# POSTGRESQL
oc new-app --name postgresql-persistent --image registry.redhat.io/rhel8/postgresql-13:1-7  
oc set env deployment postgresql-persistent -e POSTGRESQL_USER=redhat -e POSTGRESQL_PASSWORD=redhat123 -e POSTGRESQL_DATABASE=persistentdb
oc set volumes deployment/postgresql-persistent --add --type pvc --name postgresql-storage --claim-size 10Gi --claim-mode rwo --mount-path /var/lib/pgsql --claim-name postgresql-storage

# MYSQL
oc create secret generic mysql --from-literal=password=mypassword
oc new-app --name mysql registry.access.redhat.com/rhscl/mysql-57-rhel7
oc set env deployment mysql --prefix MYSQL_ROOT_ --from secret/mysql
oc set volumes deployment/mysql --name mysql-pvc --add --type pvc --claim-size 1Gi --claim-mode rwo --mount-path /var/lib/mysql

# MARIADB
oc get templates mysql-persistent -n openshift -o yaml
oc process --parameters mariadb-persistent -n openshift
oc new-app --template=mariadb-persistent -p MYSQL_USER=wordpress -p MYSQL_PASSWORD=wordpress -p MYSQL_DATABASE=wordpress

# WORDPRESS
oc new-app --name=wordpress --image=bitnami/wordpress
oc create cm wordpress-cm --from-literal=host=mariadb --from-literal=name=wordpress --from-literal=user=wordpress --from-literal=password=wordpress 
oc set env deploy wordpress --prefix WORDPRESS_DATABASE_ --from configmap/wordpress-cm
oc expose svc/wordpress
oc get routes


#
# Chapter 3
#
oc create secret generic quay-io-murillo --from-file .dockerconfigjson=${XDG_RUNTIME_DIR}/containers/auth.json --type kubernets.io/dockerconfigjson 
oc create secret docker-registry wrong-registry-credentials --docker-server=quay.io --docker-username=developer --docker-password=developer --docker-email=murilloo@gmail.com
oc secrets link default wrong-registry-credentials --for=pull
oc new-app --name hello-world quay.io/murill00/httpd2
oc create secret docker-registry right-registry-credentials --docker-server=quay.io --docker-username=developer --docker-password=developer --docker-email=murilloo@gmail.com
oc secrets link default right-registry-credentials --for=pull
oc new-app deployment --name hello-world quay.io/murill00/httpd2
oc get secrets
oc extract secret/right-registry-credentials
oc get -o json secret/right-registry-credentials
oc import-image httpd2 --confirm --all --reference-policy=local --scheduled=true --from quay.io/murill00/httpd2
oc describe is/httpd2
oc new-app --name httpd2 -i image-streams/httpd2
oc expose svc/httpd2 
curl http://httpd2-image-stream-httpd-2.apps-crc.testing


#
# Chapter 4
#
oc create buildconfig --help
oc new-app --name hello-world-php -i php:7.4-ubi8  https://github.com/murilloo/redhat-ex288-exam-preparation --context-dir php-helloworld
edit bc/hello-world-php 
oc start-build bc/hello-world-php 
oc set build-hook -h
oc set triggers deploy/hello-world-php
oc set triggers deploy/hello-world-php --remove-all
oc set triggers deploy/hello-world-php --from-image=image-stream/hello-world-php:latest -c hello-world-php
oc set triggers deploy/hello-world-php --from-config=true 
oc get -o json bc/hello-world-php | jq .spec.triggers[]
oc describe bc/hello-world-php
curl -X POST https://api.crc.testing:6443/apis/build.openshift.io/v1/namespaces/php-hello-world/buildconfigs/hello-world-php/webhooks/JB3JoWiMoiwjLa5hODc5/generic


#
# Chapter 5
#
oc set env deployment postgresql-persistent -e POSTGRESQL_USER=redhat -e POSTGRESQL_PASSWORD=redhat123 -e POSTGRESQL_DATABASE=persistentdb
oc set volumes deployment/postgresql-persistent --add --type pvc --name postgresql-storage --claim-size 10Gi --claim-mode rwo --mount-path /var/lib/pgsql --claim-name postgresql-storage
oc create secret generic mysql --from-literal=password=mypassword
oc set env deployment mysql --prefix MYSQL_ROOT_ --from secret/mysql
oc set volumes deployment/mysql --name mysql-pvc --add --type pvc --claim-size 1Gi --claim-mode rwo --mount-path /var/lib/mysql
oc create cm wordpress-cm --from-literal=host=mariadb --from-literal=name=wordpress --from-literal=user=wordpress --from-literal=password=wordpress 
oc set env deploy wordpress --prefix WORDPRESS_DATABASE_ --from configmap/wordpress-cm
oc set volume dc/postgresql --add --name=postgresql-data -t pvc --claim-name=postgres-pvc --mount-path /var/lib/pgsql/data --overwrite
oc set env deploy/expense-service QUARKUS_DATASOURCE_JDBC_URL='jdbc:postgresql://postgresql:5432/$(DATABASE_NAME)'
oc set probe deploy/expense-service --liveness --get-url=http://:8080/q/health/live --timeout-seconds=1 --initial-delay-seconds=5 --success-threshold=1 --failure-threshold=1 --period-seconds=5
oc set probe deploy/expense-service --readiness --get-url=http://:8080/q/health/ready --timeout-seconds=1 --initial-delay-seconds=5 --success-threshold=1 --failure-threshold=1 --period-seconds=5


#
# Chapter 6
#
